generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  email             String           @unique
  username          String           @unique
  name              String
  hashedPassword    String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  pgyLevel          Int?
  targetScore       Int?
  institution       String?
  specialty         String?
  isPublic          Boolean          @default(true)
  avatar            String?
  bio               String?
  contributionScore Int              @default(0)
  reputation        Int              @default(0)
  priteScores       PriteScore[]
  questionReports   QuestionReport[]
  questionReviews   QuestionReview[]
  questionVotes     QuestionVote[]
  questions         Question[]
  studyRecords      StudyRecord[]
  studySessions     StudySession[]

  @@map("users")
}

model Question {
  id                 String           @id @default(cuid())
  text               String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  options            Json
  correctAnswers     String[]
  explanation        String?
  category           String
  subcategory        String?
  examPart           String
  difficulty         String           @default("medium")
  topics             String[]
  isPublic           Boolean          @default(false)
  isVerified         Boolean          @default(false)
  timesStudied       Int              @default(0)
  averageRating      Float?
  createdById        String
  averageScore       Float?
  bookletPage        Int?
  correctAnswerCount Int              @default(0)
  examYear           Int?
  questionNumber     Int?
  rawOcrText         String?
  timesAnswered      Int              @default(0)
  uploadMethod       String?
  weaknessIndicator  Boolean          @default(false)
  reports            QuestionReport[]
  questionReviews    QuestionReview[]
  votes              QuestionVote[]
  createdBy          User             @relation(fields: [createdById], references: [id])
  studyRecords       StudyRecord[]

  @@map("questions")
}

model StudyRecord {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  wasCorrect     Boolean
  timeSpent      Int
  confidence     String
  easeFactor     Float         @default(2.5)
  repetition     Int           @default(0)
  interval       Int           @default(0)
  nextReviewDate DateTime
  userId         String
  questionId     String
  sessionId      String?
  question       Question      @relation(fields: [questionId], references: [id])
  session        StudySession? @relation(fields: [sessionId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
  @@map("study_records")
}

model StudySession {
  id             String        @id @default(cuid())
  startedAt      DateTime      @default(now())
  endedAt        DateTime?
  totalQuestions Int           @default(0)
  correctAnswers Int           @default(0)
  totalTimeSpent Int           @default(0)
  userId         String
  records        StudyRecord[]
  user           User          @relation(fields: [userId], references: [id])

  @@map("study_sessions")
}

model PriteScore {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  examDate        DateTime
  totalScore      Int
  percentile      Float?
  adultPsychiatry Int?
  childPsychiatry Int?
  neurology       Int?
  psychology      Int?
  substance       Int?
  emergency       Int?
  consultation    Int?
  userId          String
  user            User     @relation(fields: [userId], references: [id])

  @@map("prite_scores")
}

model QuestionReview {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  rating     Int
  feedback   String?
  isHelpful  Boolean  @default(true)
  reviewType String
  userId     String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
  @@map("question_reviews")
}

model QuestionVote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  voteType   String
  userId     String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
  @@map("question_votes")
}

model QuestionReport {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  reason      String
  description String?
  status      String   @default("pending")
  userId      String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@map("question_reports")
}
